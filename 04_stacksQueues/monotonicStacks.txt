A monotonic stack or queue is one whose elements are always sorted. It can be sorted either ascending or descending, 
depending on the algorithm. Monotonic stacks and queues maintain their sorted property by removing elements 
that would violate the property before adding new elements. For example, let's say you had a monotonically 
increasing stack, currently stack = [1, 5, 8, 15, 23]. You want to push 14 onto the stack. 
To maintain the sorted property, we need to first pop the 15 and 23 before pushing the 14 - after the push operation,
we have stack = [1, 5, 8, 14]

PSEUDOCODE:
stack = []
for num in nums:
    while stack.length > 0 AND stack.top >= num:
        stack.pop()
    // Between the above and below lines, do some logic depending on the problem
    stack.push(num)

Before we push a num onto the stack, we first check if the monotonic property would be violated, 
and pop elements until it won't be.
Monotonic stacks and queues are useful in problems that, for each element, involves finding the "next" element
based on some criteria, for example, the next greater element. They're also good when you have a dynamic window
of elements and you want to maintain knowledge of the maximum or minimum element as the window changes.
In more advanced problems, sometimes a monotonic stack or queue is only one part of the algorithm.

Monotonic stacks are a good option when a problem involves comparing the size of numeric elements, 
with their order being relevant.